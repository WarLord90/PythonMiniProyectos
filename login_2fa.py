import pyotp
import time

# üîë Clave secreta compartida entre cliente y servidor
SECRET_KEY = "JBSWY3DPEHPK3PXP"
totp = pyotp.TOTP(SECRET_KEY)

# Usuario y contrase√±a simulados
USUARIO = "javier"
PASSWORD = "12345678"

def mostrar_codigo_con_tiempo():
    """
    Muestra el c√≥digo actual y cu√°ntos segundos le quedan antes de expirar
    """
    codigo = totp.now()
    segundos_bloque = int(time.time()) % 30  # En qu√© segundo del bloque estamos
    tiempo_restante = 30 - segundos_bloque

    print(f"\n[Authenticator] C√≥digo actual: {codigo} (expira en {tiempo_restante}s)\n")
    return codigo

def login():
    print("üîê Sistema con 2FA (Autenticaci√≥n en Dos Factores)\n")

    usuario = input("Usuario: ")
    password = input("Contrase√±a: ")

    # Validar usuario y contrase√±a
    if usuario != USUARIO or password != PASSWORD:
        print("‚ùå Usuario o contrase√±a incorrectos.")
        return

    # Contrase√±a correcta ‚Üí pedimos 2FA
    print("\n‚úÖ Contrase√±a correcta.")
    print("Abre tu Authenticator...")

    # Mostramos el c√≥digo como si fuera tu app
    mostrar_codigo_con_tiempo()

    # Usuario ingresa el c√≥digo manualmente
    codigo_ingresado = input("Ingresa el c√≥digo de 6 d√≠gitos: ")

    # Servidor valida
    if totp.verify(codigo_ingresado):
        print("‚úÖ C√≥digo correcto. Acceso permitido.")
    else:
        print("‚ùå C√≥digo inv√°lido o expirado.")

if __name__ == "__main__":
    try:
        login()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Proceso detenido por el usuario.")
